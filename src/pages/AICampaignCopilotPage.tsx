import React from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import AICampaignCopilot from '@/components/AICampaignCopilot';
import { useToast } from '@/hooks/use-toast';
import { apiClient } from '@/lib/api-client';

const AICampaignCopilotPage: React.FC = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [searchParams] = useSearchParams();
  
  // Check if there's a brief from the simple generator
  const briefParam = searchParams.get('brief');
  const initialBrief = briefParam ? JSON.parse(briefParam) : undefined;

  const handleSaveCampaign = async (aiGeneration: any) => {
    try {
      // Transform AI generation to campaign format
      const campaignData = {
        name: `AI Campaign - ${new Date().toLocaleDateString()}`,
        description: `Campaign generated by AI Co-pilot`,
        type: 'multi_channel' as const,
        status: 'draft' as const,
        
        // Map AI generation to campaign fields
        targetAudience: aiGeneration.personas.map((p: any) => p.description).join('; '),
        buyerPersonas: aiGeneration.personas.map((p: any) => ({
          name: p.name,
          description: `${p.description} | Age: ${p.age} | Pain Points: ${p.painPoints.join(', ')} | Goals: ${p.goals.join(', ')}`
        })),
        
        channels: aiGeneration.channelMix.channels.map((c: any) => c.name),
        budgetBreakdown: aiGeneration.channelMix.channels.reduce((acc: any, channel: any) => {
          acc[channel.name.toLowerCase().replace(/\s+/g, '_')] = (aiGeneration.channelMix.totalBudget * channel.allocation / 100).toString();
          return acc;
        }, {}),
        totalBudget: aiGeneration.channelMix.totalBudget,
        
        keyMessages: aiGeneration.messagingPillars.map((p: any) => `${p.title}: ${p.description}`),
        contentStrategy: `Tone: ${aiGeneration.messagingPillars.map((p: any) => p.tone).join(', ')}`,
        
        // Add content calendar as content data
        content: {
          calendar: aiGeneration.contentCalendar,
          messagingPillars: aiGeneration.messagingPillars,
          personas: aiGeneration.personas,
          channelMix: aiGeneration.channelMix
        }
      };

      const result = await apiClient.createCampaign(campaignData);
      
      if (result.success && result.data) {
        toast({
          title: "Campaign Saved!",
          description: "Your AI-generated campaign has been saved successfully.",
        });
        navigate(`/app/campaigns/${result.data.id}`);
      } else {
        throw new Error(result.message || 'Failed to save campaign');
      }
    } catch (error) {
      console.error('Error saving campaign:', error);
      toast({
        title: "Error",
        description: "Failed to save campaign. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted/20 p-6">
      <AICampaignCopilot 
        initialBrief={initialBrief}
        onSave={handleSaveCampaign}
      />
    </div>
  );
};

export default AICampaignCopilotPage;