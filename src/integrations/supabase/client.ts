
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kciuuxoqxfsogjuqflou.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtjaXV1eG9xeGZzb2dqdXFmbG91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0Mzg4MDMsImV4cCI6MjA2NDAxNDgwM30.xLArvJytF37HKDMnr8O1euf_t_M_iRFy55_D9CI1DC0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Single instance pattern to prevent multiple client warnings
let _supabase = (globalThis as any).supabase ?? createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
if (process.env.NODE_ENV !== "production") (globalThis as any).supabase = _supabase;
export const supabase = _supabase;

// OAuth and social media helper functions
export const oauthService = {
  async initiateOAuth(platform: string) {
    const { data, error } = await supabase.functions.invoke('oauth-initiate', {
      body: { platform }
    })
    
    if (error) throw error
    return data
  },

  async getConnections() {
    const { data, error } = await supabase.functions.invoke('social-connections', {
      method: 'GET'
    })
    
    if (error) throw error
    return data
  },

  async disconnectPlatform(platform: string) {
    const { data, error } = await supabase.functions.invoke('social-connections', {
      method: 'DELETE',
      body: { platform }
    })
    
    if (error) throw error
    return data
  },

  async postToSocial(platforms: string[], content: any) {
    const { data, error } = await supabase.functions.invoke('social-post', {
      body: { platforms, content }
    })
    
    if (error) throw error
    return data
  }
}
